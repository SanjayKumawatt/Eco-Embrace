import React, { useState } from 'react';
import { Link } from 'react-router-dom';
// ЁЯСИ Cart Context рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ (рдкрд╛рде рдПрдбрдЬрд╕реНрдЯ рдХрд░реЗрдВ)
import { useCart } from '../context/CartContext'; 

import img1 from "../assets/bookmarks/img1.webp";
import img2 from "../assets/bookmarks/img2.webp";
import img3 from "../assets/bookmarks/img3.webp";


// --- Placeholder Product Data for Pattachitra Bookmarks ---
// NOTE: 'export' рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ рддрд╛рдХрд┐ PDP рдЗрд╕реЗ рдпреВрдЬрд╝ рдХрд░ рд╕рдХреЗред
export const bookmarkProducts = [
┬а // Row 1
┬а { 
┬а ┬а id: 2401, 
┬а ┬а name: "Apsaras The Dancing Beauties | Pattachitra Handmade Palm Leaf Eco...", 
┬а ┬а price: "Rs. 500.00", 
┬а ┬а imageUrl: img1, 
┬а ┬а sku: "BMK2401", 
┬а ┬а options: ['Dancing Apsaras / 1', 'Dancing Apsaras / 2'] // Assumed options for demo
┬а },
┬а { 
┬а ┬а id: 2402, 
┬а ┬а name: "Tribal Farm and Home Scene | Pattachitra Handmade Palm Leaf...", 
┬а ┬а price: "Rs. 500.00", 
┬а ┬а imageUrl: img2, 
┬а ┬а sku: "BMK2402", 
┬а ┬а options: ['1', '2', '3'] // Simple quantity options
┬а },
┬а { 
┬а ┬а id: 2403, 
┬а ┬а name: "Coexistence- Tribal Home Scene | Pattachitra Handmade Palm Leaf Eco...", 
┬а ┬а price: "Rs. 500.00", 
┬а ┬а imageUrl: img3, 
┬а ┬а sku: "BMK2403", 
┬а ┬а options: ['1', '2'] // Simple quantity options
┬а },
];

// Reusable Product Card Component (NOW FUNCTIONAL)
const ProductCard = ({ product }) => {
    // ЁЯСИ 1. Option State: Dropdown selection рдХреЛ рдЯреНрд░реИрдХ рдХрд░реЗрдВ
┬а   const [selectedOption, setSelectedOption] = useState(product.options[0]); 
    
    // ЁЯСИ 2. useCart Hook
    const { addToCart, toggleCartDrawer } = useCart();

┬а   const handleAddToCart = (e) => {
┬а     e.preventDefault(); 
┬а     e.stopPropagation(); 
        
        // Quantity рдХреЛ parse рдХрд░реЗрдВ (рдЕрдЧрд░ рдСрдкреНрд╢рди рд╕рд┐рд░реНрдлрд╝ рдХреНрд╡рд╛рдВрдЯрд┐рдЯреА рд╣реИ)
        let quantity = 1;
        // рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдСрдкреНрд╢рди рд╕рд┐рд░реНрдлрд╝ рдирдВрдмрд░ рд╣реИ рдпрд╛ рдЬрд╝реНрдпрд╛рджрд╛ рдбрд┐рдЯреЗрд▓ рд╡рд╛рд▓рд╛ string рд╣реИ
        if (selectedOption && !isNaN(parseInt(selectedOption))) {
            quantity = parseInt(selectedOption);
        }

        // ЁЯСИ 3. Cart рдореЗрдВ Item рдФрд░ Selected Option/Quantity рднреЗрдЬреЗрдВ
        addToCart(
            product, 
            quantity, 
            { selectedOption: selectedOption } // Option (Design/Count) рднреЗрдЬреЗрдВ
        );
        
        // Cart Drawer рдХреЛ рдЦреЛрд▓реЗрдВ
        toggleCartDrawer(); 
┬а   };

┬а   return (
┬а ┬а ┬а <div className="bg-white border border-gray-100 rounded-lg overflow-hidden transition-shadow duration-300 hover:shadow-xl group">
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а {/* Product Image Link */}
┬а ┬а ┬а ┬а <Link to={`/product/${product.sku}`} className="block w-full h-72 sm:h-80 overflow-hidden bg-gray-50">
┬а ┬а ┬а ┬а ┬а <img
┬а ┬а ┬а ┬а ┬а ┬а src={product.imageUrl}
┬а ┬а ┬а ┬а ┬а ┬а alt={product.name}
┬а ┬а ┬а ┬а ┬а ┬а className="w-full h-full object-cover object-top transition-transform duration-500 group-hover:scale-105"
┬а ┬а ┬а ┬а />
┬а ┬а ┬а </Link>

┬а ┬а ┬а {/* Product Details and CTA */}
┬а ┬а ┬а <div className="p-3 text-center">
┬а ┬а ┬а ┬а {/* Product Name Link */}
┬а ┬а ┬а ┬а <Link to={`/product/${product.sku}`} className="block text-sm font-medium text-gray-700 hover:text-indigo-600 mb-2 h-10 overflow-hidden">
┬а ┬а ┬а ┬а ┬а {product.name}
┬а ┬а ┬а ┬а </Link>
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а {/* Price */}
┬а ┬а ┬а ┬а <p className="text-base font-semibold text-gray-900 mb-3">
┬а ┬а ┬а ┬а ┬а {product.price}
┬а ┬а ┬а ┬а </p>

┬а ┬а ┬а ┬а {/* Conditional Dropdown for Options */}
┬а ┬а ┬а ┬а {product.options && product.options.length > 0 && (
┬а ┬а ┬а ┬а ┬а ┬а <select 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а className="w-full p-2 mb-3 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а value={selectedOption}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а onChange={(e) => setSelectedOption(e.target.value)} // Update local state on change
┬а ┬а ┬а ┬а ┬а ┬а >
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {product.options.map((option, index) => (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <option key={index} value={option}>{option}</option>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ))}
┬а ┬а ┬а ┬а ┬а ┬а </select>
┬а ┬а ┬а ┬а )}

┬а ┬а ┬а ┬а {/* Add to Cart Button (Calls functional handler) */}
┬а ┬а ┬а ┬а <button
┬а ┬а ┬а ┬а ┬а type="button"
┬а ┬а ┬а ┬а ┬а className="w-full py-2 text-sm font-semibold text-white bg-neutral-800 rounded-md transition duration-300 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"
┬а ┬а ┬а ┬а ┬а onClick={handleAddToCart} // ЁЯСИ Updated Handler
┬а ┬а ┬а ┬а >
┬а ┬а ┬а ┬а ┬а ADD TO CART
┬а ┬а ┬а ┬а </button>
┬а ┬а ┬а </div>
┬а ┬а </div>
┬а );
};

// Main Component
const PattachitraBookmarks = () => {
┬а return (
┬а ┬а <div className="bg-white min-h-screen">
┬а ┬а ┬а 
┬а ┬а ┬а {/* 1. Header/Toolbar (Filters and Sorting - Simplified) */}
┬а ┬а ┬а <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4 border-b border-gray-200 flex justify-end items-center text-sm text-gray-600">
┬а ┬а ┬а ┬а <div className="flex items-center space-x-2">
┬а ┬а ┬а ┬а ┬а <label htmlFor="sort" className="hidden sm:block">Sort By</label>
┬а ┬а ┬а ┬а ┬а <select id="sort" className="border border-gray-300 rounded-md p-1 focus:ring-indigo-500 focus:border-indigo-500">
┬а ┬а ┬а ┬а ┬а ┬а <option>Featured</option>
┬а ┬а ┬а ┬а ┬а ┬а <option>Price: Low to High</option>
┬а ┬а ┬а ┬а ┬а </select>
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а </div>

┬а ┬а ┬а {/* 2. Product Grid (4 columns) */}
┬а ┬а ┬а <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а <div className="grid grid-cols-2 gap-x-4 gap-y-10 sm:gap-x-6 lg:gap-x-8 lg:grid-cols-4">
┬а ┬а ┬а ┬а ┬а {bookmarkProducts.map((product) => (
┬а ┬а ┬а ┬а ┬а ┬а <ProductCard key={product.id} product={product} />
┬а ┬а ┬а ┬а ┬а ))}
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а </div>
┬а ┬а </div>
┬а );
};

export default PattachitraBookmarks;